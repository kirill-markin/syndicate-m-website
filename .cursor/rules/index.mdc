---
description: 
globs: 
alwaysApply: true
---
# SYNDICATE_M Website - Project Architecture Guide

## Project Overview

Modern family website built with Next.js 15.3.2 using App Router, designed for static generation with TypeScript-based data management.

## Core Architecture

### Technology Stack

- **Framework**: Next.js 15.3.2 with App Router
- **Language**: TypeScript with strict typing
- **Styling**: TailwindCSS 4
- **Data Management**: TypeScript files with exported typed data
- **Deployment**: Optimized for static generation

### Project Structure

```
syndicate-m-website/
├── src/
│   ├── app/                 # Next.js App Router pages
│   │   ├── page.tsx         # Homepage
│   │   ├── layout.tsx       # Root layout
│   │   └── globals.css      # Global styles
│   ├── data/                # TypeScript data files
│   │   ├── team-members.ts
│   │   ├── people.ts
│   │   └── site-config.ts
│   ├── lib/                 # Utility libraries
│   └── hooks/               # React hooks
├── public/                  # Static assets
└── package.json
```

## Data Management System

### TypeScript Data Structure

The project uses TypeScript files for content management located in [src/data/](mdc:src/data):

- **[ts.ts](members.ts)**: Team member profiles with bios and social ts](mdc:src/data/people.ts)**: Client/people data with profi*[site-config.ts](mdc:src/data/site-config.ts)**: Global site configurnt

### Type-Safe Data Export

Each data file exports:

- **TypeScript interfaces** for all data structures
- **Typed data objects** with full type safety
- **Helper functions** for filtering and searching
- **Compile-time validation** ensuring data integrity

### Key Exports:

```typescript
// From team-members.ts
export interface TeamMember
export interface TeamMembersData
export const teamMembers: TeamMembersData
export const getTeamMemberById(id: string): TeamMember | undefined

// From people.ts
export interface Person
export interface PeopleData
export const peopleData: PeopleData
export const getFeaturedPeople(): Person[]
export const searchPeople(query: string): Person[]

// From site-config.ts
export interface SiteConfig
export const siteConfig: SiteConfig
```

## Development Patterns

### Static Generation First

- All data loaded at build time via TypeScript imports
- Direct imports: `import { teamMembers } from '@/data/team-members'`
- Pre-render all possible content for optimal performance
- No runtime data parsing required

### Type Safety

- All data structures have TypeScript interfaces defined in data files
- Import types directly from data files, e.g.: `import { TeamMember } from '@/data/team-members'`
- Compile-time type checking for all data access
- Never use `any` types - use proper interfaces

### Content Updates

- Edit TypeScript files in `src/data/` to update content
- No database required - all content is file-based
- Full IDE support with autocomplete and type checking
- Changes validated at compile time

## Working with Data

### Loading Team Members

```typescript
import { teamMembers, type TeamMember } from "@/data/team-members";

const members: TeamMember[] = teamMembers.members;
```

### Loading People Data

```typescript
import { peopleData, getFeaturedPeople } from "@/data/people";

const allPeople = peopleData.people;
const featured = getFeaturedPeople();
```

### Site Configuration

```typescript
import { siteConfig } from "@/data/site-config";

const navigation = siteConfig.site.navigation;
```

## Best Practices

1. **Direct TypeScript imports** - import data and types directly from data files
2. **Type-first development** - define interfaces before data structures
3. **Server Components by default** - use client components only when needed
4. **Static generation optimized** - all data loaded at build time
5. **Type-safe development** - leverage TypeScript's compile-time checking
6. **Structured data files** - keep related data and types together

## Adding New Data

1. Create new TypeScript file in `src/data/` or update existing files
2. Define TypeScript interfaces for new data structures
3. Export typed data objects following existing patterns
4. Add helper functions if needed for data manipulation
5. Import directly in components with full type safety
6. Leverage IDE autocomplete and type checking

